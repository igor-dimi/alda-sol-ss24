---
title: "Blatt 2"
---

## Aufgabe 1

### 1

Rekursionsbaum des Aufrufs `sum(<1, 2, 3, 4, 5, 6, 7, 8>)`

![Rekursionsbaum](./imgs/a1-1-baum.png){#fig-baum}

Die Nummerierung der Knoten entspricht der Berechnungsreihenfolge. 


### 2

Eine nicht-konstante Laufzeit ensteht, falls uebergebene arrays auf den Stack des Funktionsaufrufs
kopiert werden muessen. 

Falls eine gegebene Implementierung der Programmiersprache folgende zwei Eigenschaften aufweist, 
kann dies vermieden werden:

* Die Groesse eines Arrays ist immer als zusaetzliche Information beinhaltet.
* Die Funktionsaufrufe werden per-default als **call by reference** realisiert statt 
  **call by value**. 

So wuerde fuer einen existierenden Array $A : \text{Array} [0 .. n - 1] \text{ of } \mathbb{N}$
der allgeimeiner Ausdruck $A[l..k]$ einen Array liefern, dessen Anfang-position im Speicher und Groesse durch
Pointerarithmetik, bzw durch den Ausdruck $k - l + 1$ bestimmt werden koennen. 
Das sind nur zwei Grundoperationen, und somit $\mathcal{O}(1)$

Da die Uebergabe der Arrays per Referenz stattfindet, wuerden die Aufrufe `sum(A[0..m-1])` und `sum(A[m..n-1])`
nur konstante Zeit bei der Initialisuerungen auf ihren Function call-stacks benoetigen. 

### 3 

a) Die Laufzeit erfuellt die Rekurrenzgleichung:

\begin{align*}
    T(1) &= 2\\
    T(n) &= 2 + 2\cdot T(\frac{n}{2}) \tag{fuer $n = 2^k > 1$}
\end{align*}

Somit folgt $T(n) = n + 1

